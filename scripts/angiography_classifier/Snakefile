import uuid
import os
import socket
from datetime import datetime

# inputs:
DataBasePath = "/home/gandalf/MIA/data/angio/databaseAngio.db"
DataSetPath = "/home/gandalf/MIA/data/angio"
query = 'SELECT * FROM DICOM_TABLE'
print('q', query)
# outputs
output = "/home/gandalf/angiography_data/runs"
tensorboard_comment = 'test'
output_directory = os.path.join(
            output,
            datetime.now().strftime('%b%d_%H-%M-%S') +
            '_' + socket.gethostname() + tensorboard_comment)
DataBasePath_copy = os.path.join(output_directory, 'DBInput.db')
DataBasePath_val = os.path.join(output_directory, 'DBInput_val.db')
DataBasePath_test = os.path.join(output_directory, 'DBInput_test.db')
output_model = os.path.join(output_directory, "model.pt")

# temp outputs
logfile_val = os.path.join('runs', str(uuid.uuid4())) + '.log'
logfile_test = os.path.join('runs', str(uuid.uuid4())) + '.log'

config_file_temp = os.path.join('runs', str(uuid.uuid4())) + '.yaml'



# params
num_workers = workflow.cores
nproc_per_node = 1
nnodes = 1
node_rank = 0
master_addr = socket.gethostbyname(socket.gethostname())
master_port = 1231
cpu = "True"
config_train = "../../configs/classification/_3D/classification_config_angio.yaml"


rule all:
    input:
        DataBasePath_copy,
        DataBasePath_val,
        DataBasePath_test,
        config_file_temp,
        output_model,
        logfile_val,
        logfile_test

rule copy_db:
    input:
        DataBasePath = DataBasePath
    output:
        output_directory = directory(output_directory),
        DataBasePath_copy = DataBasePath_copy,
        DataBasePath_val = DataBasePath_val,
        DataBasePath_test = DataBasePath_test
    shell:
        """
        mkdir -p {output.output_directory} \\
        ; cp {input.DataBasePath} {output.DataBasePath_copy} \\
        ; cp {input.DataBasePath} {output.DataBasePath_val} \\
        ; cp {input.DataBasePath} {output.DataBasePath_test}
        """

rule copy_config:
    input:
        config_train = config_train
    output:
        config_file_temp = temp(config_file_temp)

    shell:
        """
        cp {input.config_train} {output.config_file_temp}
        """

rule train_model:
    input:
        DataBasePath_copy = DataBasePath_copy,
        DataSetPath = DataSetPath,
        config = temp(config_file_temp),
        output_directory = output_directory
    output:
        output_model = output_model
    params:
        query = query,
        num_workers = num_workers,
        nproc_per_node = nproc_per_node,
        nnodes = nnodes,
        node_rank = node_rank,
        master_addr = master_addr,
        master_port = master_port,
        cpu = cpu,
    shell:
       """
       python -m torch.distributed.launch \\
       --nproc_per_node {params.nproc_per_node} \\
       --nnodes {params.nnodes} \\
       --node_rank {params.node_rank} \\
       --master_addr {params.master_addr} \\
       --master_port {params.master_port} \\
       ../../trainer.py \\
       --config {input.config} \\
       --DataBasePath {input.DataBasePath_copy} \\
       --DataSetPath {input.DataSetPath} \\
       --output_directory {input.output_directory} \\
       --query "{params.query}" \\
       --cpu {params.cpu} \\
       --num_workers {params.num_workers} \\
       ; touch {output.output_model}
       """

rule eval_model_val_set:
    input:
        DataBasePath_val = DataBasePath_val,
        DataSetPath = DataSetPath,
        output_directory = output_directory,
        out = rules.train_model.output.output_model
    output:
        logfile_val = temp(logfile_val)
    params:
        num_workers = num_workers,
        cpu = cpu,
        query = query
    shell:
        """
        python ../../tester.py \\
        --num_workers {params.num_workers} \\
        --DataBasePath {input.DataBasePath_val} \\
        --DataSetPath {input.DataSetPath} \\
        --output_directory {input.output_directory} \\
        --query "{params.query}" \\
        --cpu {params.cpu} \\
        ; touch {output.logfile_val} \\
        """

rule eval_model_test_set:
    input:
        DataBasePath_test = DataBasePath_test,
        DataSetPath = DataSetPath,
        output_directory = output_directory,
        out = rules.train_model.output.output_model
    output:
        logfile_test = temp(logfile_test)
    params:
        num_workers = num_workers,
        cpu = cpu,
        query = query,
        test_size = 1
    shell:
        """
        python ../../tester.py \\
        --num_workers {params.num_workers} \\
        --DataBasePath {input.DataBasePath_test} \\
        --DataSetPath {input.DataSetPath} \\
        --output_directory {input.output_directory} \\
        --query "{params.query}" \\
        --cpu {params.cpu} \\
        --TestSize {params.test_size} \\
        ; touch {output.logfile_test} \\
        """
