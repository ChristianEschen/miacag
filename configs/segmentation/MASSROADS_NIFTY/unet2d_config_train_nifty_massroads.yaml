# use a fixed random seed to guarantee that when you run the code twice you will get the same outcome
manual_seed: 0
# PyTorch configuration
local_rank: 1
# model configuration

model_name: 'UNet2D'
model:
  dimensions: 2
  # number of input channels to the model
  in_channels: 3
  # number of output classes (output channels)
  classes: 2

  channels: (16, 32, 64, 128, 256)
  
  strides: (2, 2, 2, 2)

  num_res_units: 2

# Data loader configuration
loaders:
  task_type: 'image2image'
  task: 'costum'
  format: 'nifty'


  TraindataRoot: '/home/gandalf/MIA/data/MassRoads2D_Nifty'
  TraindataCSV: '/home/gandalf/MIA/data/MassRoads2D_Nifty/test.csv'
  ValdataRoot: '/home/gandalf/MIA/data/MassRoads2D_Nifty'
  ValdataCSV: '/home/gandalf/MIA/data/MassRoads2D_Nifty/test.csv'


  pixdim_height: 1
  pixdim_width: 1
  pixdim_depth: 999
  batchSize: 2
  height: 256
  width: 256
  depth: -1

  numWorkers: 3
  mode: training
  val_method:
    type: 'sliding_window' #'sliding_window'

# trainer configuration
trainer:
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  resume: null
  # how many iterations between validations
  validate_frequency: 50
  # validation method sliding_window or patch

  # max number of epochs
  epochs: 20
# optimizer configuration
optimizer:
  type: "sgd" #
  # initial learning rate
  learning_rate: 0.01 # 0.01 #0.0002
  # weight decay
  momentum: 0.99
  weight_decay: 0.00003
lr_scheduler:  
  type: 'poly'
  end_lr: 0.001
  power: 0.9
  milestones: [10, 30, 60]
  gamma: 0.2
# loss function configuration
loss:
  # loss function to be used during training
  name: ['diceCE_loss'] #CE_pixel CE_pixel
# evaluation metric configuration
eval_metric:
  name: [dice_class, dice_global]
# learning rate scheduler configuration
