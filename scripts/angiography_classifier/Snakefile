import uuid
import os
import socket
from datetime import datetime


def mkFolder(dir):
    os.makedirs(dir, exist_ok=True)

# inputs:
DataSetPath = "/home/sauroman/DicomAnnotation/"
query = "SELECT * FROM ?table_name"
table_name_val = "dicom_table"
table_name_test = "dicom_table_test"

# outputs
output = "/home/sauroman/mia/scripts/angiography_classifier/runs"
tensorboard_comment = 'test'
experiment_name = datetime.now().strftime('%b%d_%H-%M-%S') + \
            '_' + socket.gethostname() + tensorboard_comment
output_directory = os.path.join(
            output,
            experiment_name)
mkFolder(output_directory)
output_model = os.path.join(output_directory, "model.pt")

output_table_name_val = table_name_val + "_" + experiment_name
output_table_name_test = table_name_test + "_" + experiment_name


# temp outputs
tempfile_table_copy_inp = os.path.join('runs', str(uuid.uuid4())) + '.log'
tempfile_table_copy_out = os.path.join('runs', str(uuid.uuid4())) + '.log'

logfile_val = os.path.join('runs', str(uuid.uuid4())) + '.log'
logfile_test = os.path.join('runs', str(uuid.uuid4())) + '.log'

config_file_temp = os.path.join('runs', str(uuid.uuid4())) + '.yaml'



# params
num_workers = workflow.cores
nproc_per_node = 1
nnodes = 1
node_rank = 0
master_addr = socket.gethostbyname(socket.gethostname())
master_port = 1231
cpu = "True"
config_train = "../../configs/classification/_3D/classification_config_angio.yaml"

# postgres configs
username = 'sauroman'
password = '123qweasd'
database = 'mydb'
host = "localhost"


rule all:
    input:
        tempfile_table_copy_out,
        config_file_temp,
        output_model,
        logfile_val,
        logfile_test

rule copy_table:
    input:
        output_directory = output_directory
    output:
        tempfile_table_copy_out = temp(tempfile_table_copy_out)
    params:
        username = username,
        password = password,
        database = database,
        host = host,
        table_name_val = table_name_val,
        table_name_test = table_name_test,
        output_table_name_val = output_table_name_val,
        output_table_name_test = output_table_name_test

    shell:
        """
        mkdir -p {input.output_directory} \\
        ; python ../copy_table.py \\
            --database {params.database} \\
            --username {params.username} \\
            --password {params.password} \\
            --host {params.host} \\
            --table_name_input {params.table_name_val} \\
            --table_name_output {params.output_table_name_val} \\
        ; python ../copy_table.py \\
            --database {params.database} \\
            --username {params.username} \\
            --password {params.password} \\
            --host {params.host} \\
            --table_name_input {params.table_name_test} \\
            --table_name_output {params.output_table_name_test} \\
        ; touch {output.tempfile_table_copy_out}
        """

rule copy_config:
    input:
        config_train = config_train
    output:
        config_file_temp = temp(config_file_temp)

    shell:
        """
        cp {input.config_train} {output.config_file_temp}
        """

rule train_model:
    input:
        DataSetPath = DataSetPath,
        config = config_file_temp,
        output_directory = directory(output_directory)
    output:
        output_model = output_model
    params:
        query = query,
        num_workers = num_workers,
        nproc_per_node = nproc_per_node,
        nnodes = nnodes,
        node_rank = node_rank,
        master_addr = master_addr,
        master_port = master_port,
        cpu = cpu,
        username = username,
        password = password,
        database = database,
        host = host,
        output_table_name_val = output_table_name_val
    shell:
       """
       python -m torch.distributed.launch \\
       --nproc_per_node {params.nproc_per_node} \\
       --nnodes {params.nnodes} \\
       --node_rank {params.node_rank} \\
       --master_addr {params.master_addr} \\
       --master_port {params.master_port} \\
       ../../trainer.py \\
       --config {input.config} \\
       --DataSetPath {input.DataSetPath} \\
       --output_directory {input.output_directory} \\
       --database {params.database} \\
       --username {params.username} \\
       --password {params.password} \\
       --host {params.host} \\
       --table_name {params.output_table_name_val} \\
       --query "{params.query}" \\
       --cpu {params.cpu} \\
       --num_workers {params.num_workers} \\
       ; touch {output.output_model}
       """

rule eval_model_val_set:
    input:
        DataSetPath = DataSetPath,
        output_directory = output_directory,
        out = rules.train_model.output.output_model
    output:
        logfile_val = temp(logfile_val)
    params:
        num_workers = num_workers,
        cpu = cpu,
        query = query,
        username = username,
        password = password,
        database = database,
        host = host,
        output_table_name_val = output_table_name_val
    shell:
        """
        python ../../tester.py \\
        --num_workers {params.num_workers} \\
        --DataSetPath {input.DataSetPath} \\
        --output_directory {input.output_directory} \\
        --database {params.database} \\
        --username {params.username} \\
        --password {params.password} \\
        --host {params.host} \\
        --table_name {params.output_table_name_val} \\
        --query "{params.query}" \\
        --cpu {params.cpu} \\
        ; touch {output.logfile_val} \\
        """

rule eval_model_test_set:
    input:
        DataSetPath = DataSetPath,
        output_directory = output_directory,
        out = rules.train_model.output.output_model
    output:
        logfile_test = temp(logfile_test)
    params:
        num_workers = num_workers,
        cpu = cpu,
        query = query,
        test_size = 1,
        username = username,
        password = password,
        database = database,
        host = host,
        output_table_name_test = output_table_name_test
    shell:
        """
        python ../../tester.py \\
        --num_workers {params.num_workers} \\
        --DataSetPath {input.DataSetPath} \\
        --output_directory {input.output_directory} \\
        --database {params.database} \\
        --username {params.username} \\
        --password {params.password} \\
        --host {params.host} \\
        --table_name {params.output_table_name_test} \\
        --query "{params.query}" \\
        --cpu {params.cpu} \\
        --TestSize {params.test_size} \\
        ; touch {output.logfile_test} \\
        """
